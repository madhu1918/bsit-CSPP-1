[{
	"title":"Solve the following problem Build the shift dictionary and Apply shift",
	"activityType":"assignment",
	"questions":
	[
		{
			"questionType":"filesubmission",
			"questionText":[
				{
					"text":"The <code>Message</code> class contains methods that could be used to apply a cipher to a string, either to encrypt or to decrypt a message (since for Caesar codes this is the same action).<br><br> In the next two questions, you will fill in the methods of the <code>Message</code> class found in <code>ps6.py</code> according to the specifications in the docstrings. The methods in the <code>Message</code> class already filled in are: <br><br> <ul> <li><code>__init__(self, text)</code></li>  <li>The getter method <code>get_message_text(self)</code></li>   <li>The getter method <code>get_valid_words(self)</code>, notice that this one returns a copy of <code>self.valid_words</code> to prevent someone from mutating the original list.</li>    </ul>  <br><br>  In this problem, you will fill in two methods:<br><br>  1.Fill in the <code>build_shift_dict(self, shift)</code> method of the <code>Message</code> class. Be sure that your dictionary includes both lower and upper case letters, but that the shifted character for a lower case letter and its uppercase version are lower and upper case instances of the same letter. What this means is that if the original letter is \"a\" and its shifted value is \"c\", the letter \"A\" should shift to the letter \"C\".<br><br> If you are unfamiliar with the ordering or characters of the English alphabet, we will be following the letter ordering displayed by <code>string.ascii_lowercase</code> and <code>string.ascii_uppercase:</code> <br><br> <code>>>> import string<br><br>>>> print(string.ascii_lowercase)<br><br>abcdefghijklmnopqrstuvwxyz<br><br>>>> print(string.ascii_uppercase)<br><br>ABCDEFGHIJKLMNOPQRSTUVWXYZ</code> <br><br>  A reminder from the introduction page - characters such as the space character, commas, periods, exclamation points, etc will not be encrypted by this cipher - basically, all the characters within <code>string.punctuation</code>, plus the space (<code>' '</code>) and all numerical characters (0 - 9) found in <code>string.digits</code>.  <br><br> 2.Fill in the <code>apply_shift(self, shift)</code> method of the <code>Message</code> class. You may find it easier to use <code>build_shift_dict(self, shift)</code>. Remember that spaces and punctuation should not be changed by the cipher. <br><br>  Paste your implementation of the <code>Message</code> class in the box below.<br><br>Check your program against the give test cases below as a Zip file. Submit your Solution(Zip file) when all test cases are passed"
				},
				{
					"attachment":["Classes and Objects - Assignment-1.zip"]
				}
			],
			"points":"20"			
		}
	]
},
{
	"title":"Solve the following problem Plain text Message",
	"activityType":"assignment",
	"questions":
	[
		{
			"questionType":"filesubmission",
			"questionText":[
				{
					"text":"For this problem, the graders will use our implementation of the <code>MessageC</code> class, so don't worry if you did not get the previous parts correct. <br> <code>PlaintextMessage</code> is a subclass of <code>Message</code> and has methods to encode a string using a specified shift value. Our class will always create an encoded version of the message, and will have methods for changing the encoding. <br> Implement the methods in the class <code>PlaintextMessage</code> according to the specifications in ps6.py. The methods you should fill in are: <br> <ul>  <li><code>__init__(self, text, shift)</code>: Use the parent class constructor to make your code more concise.</li> <li>The getter method <code>get_shift(self)</code></li> <li>The getter method <code>get_encrypting_dict(self)</code>: This should return a COPY of self.encrypting_dict to prevent someone from mutating the original dictionary.</li>  <li>The getter method <code>get_message_text_encrypted(self)</code></li> <li><code>change_shift(self, shift)</code>: Think about what other methods you can use to make this easier. It shouldnâ€™t take more than a couple lines of code.</li> <//ul> <br> Paste your implementation of the entire <code>PlaintextMessage</code> class in the box below.<br><br>Check your program against the give test cases below as a Zip file. Submit your Solution(Zip file) when all test cases are passed"
				},
				{
					"attachment":["Classes and Objects - Assignment-2.zip"]
				}
			],
			"points":"20"
						
		}
	]
}
]
