[{
	"activityType":"assignment",
	"title":"Solve the following Assignment pulling out all the available letters on Dictionaries",
	"questions":
	[
		{
			"questionType":"filesubmissions",
			"questionText":
			[
				{
					"text":"Next, implement the function getAvailableLetters that takes in one parameter - a list of letters, lettersGuessed. This function returns a string that is comprised of lowercase English letters - all lowercase English letters that are not in lettersGuessed.<br>Example Usage:"
				},
				{
					"code":"pr3.py"
				},
				{
					"text":"Note that this function should return the letters in alphabetical order, as in the example above.<br>For this function, you may assume that all the letters in lettersGuessed are lowercase."
				},
				{
					"text":"<b>Hints</b>:You might consider using string.ascii_lowercase, which is a string comprised of all lowercase letters:<br><br>Check your program against the give test cases below as a Zip file. Submit your Solution(Zip file) when all test cases are passed"
				},
				{
					"attachment":["Assignment-1.zip"]
				},
				{
					"code":"pr31.py"
				}
			],
			"points":"20",
			"code":"problem3.py"
		}
	]
},
{
	"activityType":"assignment",
	"title":"Solve the following Assignment The Game on Dictionaries",
	"questions":[
		{
			"questionType":"filesubmission",
			"questionText":[
				{
					"text":"Now you will implement the function hangman, which takes one parameter - the secretWord the user is to guess. This starts up an interactive game of Hangman between the user and the computer. Be sure you take advantage of the three helper functions, isWordGuessed, getGuessedWord, and getAvailableLetters, that you've defined in the previous part.<br><br><b>Hints</b><ul><li>You should start by noticing where we're using the provided functions (at the top of ps3_hangman.py) to load the words and pick a random one. Note that the functions loadWords and chooseWord should only be used on your local machine, not in the tutor. When you enter in your solution in the tutor, you only need to give your hangman function.</li><li>Consider using lower() to convert user input to lower case. For example:<br><code>guess = 'A'</code><br><code>guessInLowerCase = guess.lower()</code></li><li>Consider writing additional helper functions if you need them!</li><li>There are four important pieces of information you may wish to store:<ol><li>secretWord: The word to guess.</li><li>lettersGuessed: The letters that have been guessed so far.</li><li>mistakesMade: The number of incorrect guesses made so far.</li><li>availableLetters: The letters that may still be guessed. Every time a player guesses a letter, the guessed letter must be removed from availableLetters (and if they guess a letter that is not in availableLetters, you should print a message telling them they've already guessed that - so try again!).</li></ol></li></ul><br>Check the below text files for sample output"
				},
				{
					"file":"sampleoutput1.txt"
				},
				{
					"file":"sampleoutput2.txt"
				},
				{
					"text":"Note that if you choose to use the helper functions isWordGuessed, getGuessedWord, or getAvailableLetters, you do not need to paste your definitions in the box. We have supplied our implementations of these functions for your use in this part of the problem. If you use additional helper functions, you will need to paste those definitions here.<br>Your function should include calls to input to get the user's guess.<br><br>Why does my output have None at various places?<br>None is a keyword and it comes from the fact that you are printing the result of a function that does not return anything. For example:"
				},
				{
					"code":"pr4.py"
				},
				{
					"text":"If you just call the function with foo(3), you will see output:<br><code> 3   #-- because the function printed the variable</code><br>However, if you do print(foo(3)), you will see output:<br><code> 3     #-- because the function printed the variable<br>None  #-- because you printed the function (and hence the return)</code><br><br>All functions return something. If a function you write does not return anything (and just prints something to the console), then the default action in Python is to return None"
				}
			],
			"points":"20",
			"code":"problem4.py"
		}
	]
}
]
