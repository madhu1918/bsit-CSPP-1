[{
	"title": "Solve the following Problem Word scores",
	"activityType": "quiz",
	"questions": [
	{
		"questionType":"filesubmission",
		"questionText":[
			{
				"text":"The first step is to implement some code that allows us to calculate the score for a single word. The function <b>getWordScore</b> should accept as input a string of lowercase letters (a word) and return the integer score for that word, using the game's scoring rules.<br><b>Scoring</b><ul><li>The score for the hand is the sum of the scores for each word formed.</li><li>The score for a word is the sum of the points for letters in the word, multiplied by the length of the word, plus 50 points if all n letters are used on the first word created.</li><li>Letters are scored as in Scrabble; A is worth 1, B is worth 3, C is worth 3, D is worth 2, E is worth 1, and so on. We have defined the dictionary SCRABBLE_LETTER_VALUES that maps each lowercase letter to its Scrabble letter value.</li><li>For example, 'weed' would be worth 32 points ((4+1+1+2) for the four letters, then multiply by len('weed') to get (4+1+1+2)*4 = 32). Be sure to check that the hand actually has 1 'w', 2 'e's, and 1 'd' before scoring the word!</li><li>As another example, if n=7 and you make the word 'waybill' on the first try, it would be worth 155 points (the base score for 'waybill' is (4+1+4+3+1+1+1)*7=105, plus an additional 50 point bonus for using all n letters).</li></ul><br><br><b>Hints</b>:<ul><li>You may assume that the input <b>word</b> is always either a string of lowercase letters, or the empty string </b></li><li>You will want to use the <b>SCRABBLE_LETTER_VALUES</b> dictionary defined at the top of <b>ps4a.py</b>. You should not change its value.</li><li>Do <b>not</b> assume that there are always 7 letters in a hand! The parameter <b>n</b> is the number of letters required for a bonus score (the maximum number of letters in the hand). Our goal is to keep the code modular - if you want to try playing your word game with n=10 or n=4, you will be able to do it by simply changing the value of <b>HAND_SIZE!</b></li><li><b>Testing:</b> If this function is implemented properly, and you run <b>test_ps4a.py</b>, you should see that the <b>test_getWordScore()</b> tests pass. Also test your implementation of getWordScore, using some reasonable English words.</li></ul>.<br>Complete the below code and be sure you've passed the appropriate tests in <b>test_ps4a.py</b><br><br>Check your program against the give test cases below as a Zip file. Submit your Solution(Zip file) when all test cases are passed"
			},
			{
				"attachment":["Assignment-1.zip"]
			}
		],
		"points":"20",
		"code": "getWordScore.py"
	}
	]
},
{
	"title": "Solve the following Problem Dealing with hands",
	"activityType": "assignment",
	"questions": [
	{
		"questionType":"filesubmission",
		"questionText":[
			{
				"text":"<b>**Please read this problem entirely!!**</b> The majority of this problem consists of learning how to read code, which is an incredibly useful and important skill. At the end, you will implement a short function. Be sure to take your time on this problem - it may seem easy, but reading someone else's code can be challenging and this is an important exercise.<br><b>Representing hands</b>A <b>hand</b> is the set of letters held by a player during the game. The player is initially dealt a set of random letters. For example, the player could start out with the following hand: <b>a, q, l, m, u, i, l</b>. In our program, a hand will be represented as a dictionary: the keys are (lowercase) letters and the values are the number of times the particular letter is repeated in that hand. For example, the above hand would be represented as:<br><b>hand = {'a':1, 'q':1, 'l':2, 'm':1, 'u':1, 'i':1}</b><br>Notice how the repeated letter <b>'l'</b> is represented. Remember that with a dictionary, the usual way to access a value is <b>hand['a']</b>, where <b>'a'</b> is the key we want to find. However, this only works if the key is in the dictionary; otherwise, we get a <b>KeyError</b>. To avoid this, we can use the call <b>hand.get('a',0)</b>. This is the \"safe\" way to access a value if we are not sure the key is in the dictionary. <b>d.get(key,default)</b> returns the value for <b>key</b> if <b>key</b> is in the dictionary <b>d</b>, else <b>default</b>. If <b>default</b> is not given, it returns <b>None</b>, so that this method never raises a <b>KeyError</b>. For example:<br><br>>>> hand['e']<br>Traceback (most recent call last):<br>File \"<stdin>\", line 1, in <module><br>KeyError: 'e'<br>>>> <br><br>hand.get('e', 0)<br>0<br><b>Converting words into dictionary representation</b><br>One useful function we've defined for you is <b>getFrequencyDict</b>, defined near the top of <b>ps4a.py</b>. When given a string of letters as an input, it returns a dictionary where the keys are letters and the values are the number of times that letter is represented in the input string. For example:<br><br><br>>>> getFrequencyDict(\"hello\")<br>{'h': 1, 'e': 1, 'l': 2, 'o': 1}<br>As you can see, this is the same kind of dictionary we use to represent hands.<br><b>Displaying a hand</b>Given a hand represented as a dictionary, we want to display it in a user-friendly way. We have provided the implementation for this in the <b>displayHand</b> function. Take a few minutes right now to read through this function carefully and understand what it does and how it works.<br><b>Generating a random hand</b>The hand a player is dealt is a set of letters chosen at random. We provide you with the implementation of a function that generates this random hand, <b>dealHand</b>. The function takes as input a positive integer <b>n</b>, and returns a new object, a hand containing <b>n</b> lowercase letters. Again, take a few minutes (right now!) to read through this function carefully and understand what it does and how it works.<br><b>Removing letters from a hand (you implement this)</b><br>The player starts with a hand, a set of letters. As the player spells out words, letters from this set are used up. For example, the player could start out with the following hand: <b>a, q, l, m, u, i, l</b>. The player could choose to spell the word <b>quail</b> . This would leave the following letters in the player's hand: <b>l, m</b>. Your task is to implement the function <b>updateHand</b>, which takes in two inputs - a <b>hand</b> and a <b>word</b> (string). <b>updateHand</b> uses letters from the <b>hand</b> to spell the word, and then returns a copy of the hand, containing only the letters remaining. For example:<br><br><br>>>> hand = {'a':1, 'q':1, 'l':2, 'm':1, 'u':1, 'i':1}<br>>>> displayHand(hand) # Implemented for you<br>a q l l m u i<br>>>> hand = updateHand(hand, 'quail') # You implement this function!<br>>>> hand{'a':0, 'q':0, 'l':1, 'm':1, 'u':0, 'i':0}<br>>>> displayHand(hand)<br>l m<br><br>Implement the <b>updateHand</b> function. Make sure this function has no side effects: i.e., it must not mutate the hand passed in. Before pasting your function definition here, be sure you've passed the appropriate tests in <b>test_ps4a.py</b>.<br><br><b>Hints</b>:<ul><li><b>Testing:</b> Make sure the <b>test_updateHand()</b> tests pass. You will also want to test your implementation of <b>updateHand</b> with some reasonable inputs.</li><li>You may wish to review the \".copy\" method of Python dictionaries (review this and other Python dictionary methods<a href=\"https://docs.python.org/3/library/stdtypes.html#mapping-types-dict\">here)</a></li></ul><br>Your implementation of updateHand should be short (ours is 4 lines of code). It does not need to call any helper functions.<br>Complete the below code and be sure you've passed the appropriate tests in <b>test_ps4a.py</b><br><br>Check your program against the give test cases below as a Zip file. Submit your Solution(Zip file) when all test cases are passed"
			},
			{
				"attachment":["Assignment-2.zip"]
			}
		] ,
		"points":"20",
		"code": "updateHand.py"
	}
	]
},
{
	"title":"Solve the following Problem Assignment",
	"activityType":"assignment",
	"quizDescription":"At this point, we have written code to generate a random hand and display that hand to the user. We can also ask the user for a word (Python's input) and score the word (using your getWordScore). However, at this point we have not written any code to verify that a word given by a player obeys the rules of the game. A valid word is in the word list; and it is composed entirely of letters from the current hand. Implement the isValidWord function.<br><br><b>Testing:</b>Make sure the test_isValidWord tests pass. In addition, you will want to test your implementation by calling it multiple times on the same hand - what should the correct behavior be? Additionally, the empty string ('') is not a valid word - if you code this function correctly, you shouldn't need an additional check for this condition <br><br>Fill in the code for isValidWord in ps4a.py and be sure you've passed the appropriate tests in test_ps4a.py before pasting your function definition here.",
	"questions": [
			{
				"questionType": "filesubmission",
				"points":"20",
				"questionText":[
					{
						"text":"Check your program against the give test cases below as a Zip file. Submit your Solution(Zip file) when all test cases are passed"
					},
					{
						"attachment":["Assignment-3.zip"]
					},
					{
						"code":"code 3.py"
					}
				]
				
			}
		]
},
{
	"title":"Solve the following Problem Assignment",
	"activityType":"assignment",
	"quizDescription":"We are now ready to begin writing the code that interacts with the player. We'll be implementing the playHand function. This function allows the user to play out a single hand. First, though, you'll need to implement the helper calculateHandlen function, which can be done in under five lines of code.",
	"questions": [
			{
				"questionType": "filesubmission",
				"points":"20",
				"questionText":[
					{
						"text":"Check your program against the give test cases below as a Zip file. Submit your Solution(Zip file) when all test cases are passed"
					},
					{
						"attachment":["Assignment-4.zip"]
					},
					{
						"code":"code 4.py"
					}
				]
				
			}
		]
}
]
