[{
	"title":"Last activity you solved few questions. In this activity we give you some questions, try to answer those questions",
	"activityType":"quiz",
	"quizDescription":[{"text": "For the following programs, fill in the best-case and the worst-case number of steps it will take to run each program.For these questions, you'll be asked to write a mathematical expression. Use +, -, / signs to indicate addition, subtraction, and division. Explicitly indicate multiplication with a * (ie say \"6*n\" rather than \"6n\"). Indicate exponentiation with a caret (^) (ie \"n^4\" for ). Indicate base-2 logarithms with the word log2 followed by parenthesis (ie \"log2(n)\").<br>"},{"code":"programEfficiencyExercise2Activity2Program2.py"}],
	"questions": 
		[
			{
				"questionType": "fillintheblank",
				"questionText": "What is the number of steps it will take to above Program  in the best case? Express your answer in terms of n, the size of the input x.",
				"points":"1",
				"answer": "2003",
				"feedback":"In the best case scenario, x is less than or equal to 0. We first execute the assignment total = 0 for one step. Next we execute the for i in range(1000) loop. This loop is executed 1000 times and has two steps (one for the assignment of i each time through the loop, as well as one for the = operation) on each iteration. We next check if x > 0 - it is not so we do not enter the loop. Adding in one step for the return statement, in the best case we execute 1 + 2*1000 + 1 + 1 = 2003 steps."
			},
			{
				"questionType": "fillintheblank",
				"questionText": "What is the number of steps it will take to run above Program  in the worst case? Express your answer in terms of n, the size of the input x.",
				"points":"1",
				"answer": "5*log2(n) + 2008",
				"feedback":"In the worst case scenario, x is a large positive number. In this case we first execute the assignment total = 0 for one step, then we execute the first loop 1000 times (2000 total steps). Finally execute the second loop (while x > 0) log2(n) + 1 times. This is tricky! Because we divide x by 2 every time through the loop, we only execute this loop a logarithmic number of times. log2(n) divisions of x by 2 will get us to x = 1; we'll need one more division to get x <= 0 . Don't worry if you couldn't get this fact; we'll go through it a few more times in this unit.<br>This while loop has five steps (one for the conditional check, x > 0, and two each for the \"//=\" and += operations). When we finally get to the point where x = 0, we execute the conditional check x > 0 one last time - since it is not, we do not enter the loop. Adding in one step for the return statement, in the worst case we execute 1 + 2*1000 + 5*(log2(n) + 1) + 1 + 1 = 5*log2(n) + 2008 steps."
			}
		]
}]	
