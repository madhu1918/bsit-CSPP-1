[{
	"title":"Last activity you solved few questions. In this activity we give you some questions, try to answer those questions",
	"activityType":"quiz",
	"quizDescription": [{"text":"For the following programs, fill in the best-case and the worst-case number of steps it will take to run each program.For these questions, you'll be asked to write a mathematical expression. Use +, -, / signs to indicate addition, subtraction, and division. Explicitly indicate multiplication with a * (ie say \"6*n\" rather than \"6n\"). Indicate exponentiation with a caret (^) (ie \"n^4\" for ). Indicate base-2 logarithms with the word log2 followed by parenthesis (ie \"log2(n)\")<br>"},{"code":"programEfficiencyExercise2Activity1Program3.py"}],
	"questions": 
		[
			{
				"questionType": "fillintheblank",
				"questionText": "What is the number of steps it will take to run Program 3 in the best case? Express your answer in terms of n, the number of elements in the list L.",
				"points":"1",
				"answer": "3",
				"feedback":"In the best case scenario, L is an empty list. Thus we execute only the first two assignment statements, then the return statement. Therefore in the best case we execute 3 steps. Note that since the list is empty, no assignments are performed in the for x in L lines."
			},
			{
				"questionType": "fillintheblank",
				"questionText": "What is the number of steps it will take to run Program 3 in the worst case? Express your answer in terms of n, the number of elements in the list L.",
				"points":"1",
				"answer": "7*n + 2",
				"feedback":"In the worst case scenario, L is a list with its elements sorted in increasing order (eg, [1, 3, 5, 7, ...]). In this case we execute the first two assignment statements (2 steps). Next we execute the first loop n times. This first loop has three steps (one for the assignment of x each time through the loop, as well as two for the += operation), adding 3*n steps.<br>Finally we execute the second loop n times. The first time we execute this loop, we perform 3 steps - one for the assignment of x; then we run the check if highestFound == None, and finding it to be True, we execute the assignment highestFound = x.<br>The next (n-1) times we execute this loop, we perform 4 steps: one for the assignment of x, then we run the check if highestFound == None, and finding it to be False, we run the check elif x > highestFound. Since this is always True (the list is sorted in increasing order), we execute the assignment highestFound = x. Therefore in the second loop we execute 3 + (n-1)*4 = 3 + 4*n - 4 = 4*n - 1 steps.<br>Finally we execute the return statement, which is one more step.<br>Pulling this all together, we can see that in the worst case we execute 2 + 3*n + 4*n - 1 + 1= 7*n + 2 steps."
			}
		]
}]	
