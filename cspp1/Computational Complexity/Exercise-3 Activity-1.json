[{
	"title":"Last activity we learned Big oh, in this activity there are some questions, try to answer those questions",
	"activityType":"quiz",
	"quizDescription": [{"text":"For the following programs, fill in the best-case and the worst-case number of steps it will take to run each program.For these questions, you'll be asked to write a mathematical expression. Use +, -, / signs to indicate addition, subtraction, and division. Explicitly indicate multiplication with a * (ie say \"6*n\" rather than \"6n\"). Indicate exponentiation with a caret (^) (ie \"n^4\" for ). Indicate base-2 logarithms with the word log2 followed by parenthesis (ie \"log2(n)\").<br>"},{"code":"BigohNotationExercise1activity1Program1.py"}],
	"questions": 
		[
			{
				"questionType": "fillintheblank",
				"questionText": "What is the number of steps it will take to run above Program in the best case? Express your answer in terms of n, the number of elements in the list L. You can assume list appending takes 1 step.",
				"points":"1",
				"answer": "2",
				"feedback":"In the best case scenario, L is an empty list. So we execute only the first assignment statement, then the return statement. Thus in the best case we execute 2 steps. Note that since the list is empty, no assignments are performed in the for x in L line.."
			},
			{
				"questionType": "fillintheblank",
				"questionText": "What is the number of steps it will take to run above Program in the worst case? Express your answer in terms of n, the number of elements in the list L. You can assume list appending takes 1 step..",
				"points":"1",
				"answer": "3*n^2 + n + 2",
				"feedback":"In the worst case scenario, L is a long list. In this case we go through the loop for x in L n times. Every time through this loop, we execute an assignment of a value to x, and then the inner loop for y in L. The assignment takes 1 step on each iteration; how many steps does the inner loop take on each iteration?<br>The inner loop has three operations (assignment of a value to y, x*y, and list appending). So the inner loop executes 3*n times on each iteration of the outer loop. Thus the nested loop structure is executed n * (3*n + 1) = 3*n**2 + n times!<br>Adding in two steps (for the first assignment statement, and the return statement) we see that in the worst case, this program executes 3*n**2 + n + 2 steps."
			}
		]
}]	
