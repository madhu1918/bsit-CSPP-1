[{
	"title":"Solve the following problem ciphertext message",
	"activityType":"assignment",
	"questions":
	[
		{
			"questionType":"filesubmission",
			"questionText":"For this problem, the graders will use our implementation of the <code>Message</code> and <code>PlaintextMessage</code> classes, so don't worry if you did not get the previous parts correct. <br><br> Given an encrypted message, if you know the shift used to encode the message, decoding it is trivial. If <code>message</code> is the encrypted message, and <code>s</code> is the shift used to encrypt the message, then <code>apply_shift(message, 26-s)</code> gives you the original plaintext message. Do you see why? <br><br> The problem, of course, is that you donâ€™t know the shift. But our encryption method only has 26 distinct possible values for the shift! We know English is the main language of these emails, so if we can write a program that tries each shift and maximizes the number of English words in the decoded message, we can decrypt their cipher! A simple indication of whether or not the correct shift has been found is if most of the words obtained after a shift are valid words. Note that this only means that most of the words obtained are actual words. It is possible to have a message that can be decoded by two separate shifts into different sets of words. While there are various strategies for deciding between ambiguous decryptions, for this problem we are only looking for a simple solution. <br><br> Fill in the methods in the class <code>CiphertextMessage</code> acording to the specifications in ps6.py. The methods you should fill in are: <br><br>  <ul>  <li><code>__init__(self, text)</code>: Use the parent class constructor to make your code more concise.</li> <li><code>decrypt_message(self)</code>: You may find the helper function <code>is_word(wordlist, word)</code> and the string <a href=\"https://docs.python.org/3/library/stdtypes.html#str.split\">method</a> <code>split()</code> useful. Note that <code>is_word</code> will ignore punctuation and other special characters when considering whether a word is valid.</li>  </ul> <br><br> <b>Hints</b> <br><br> Using string.split<br><br> You may find the function <code>string.split</code> useful for dividing the text up into words. <br><br> <code>>>> 'Hello world!'.split('o') <br><br> ['Hell', ' w', 'rld!'] <br><br> >>> '6.00.1x is pretty fun'.split(' ') <br><br> ['6.00.1x', 'is', 'pretty', 'fun']</code> <br><br> Paste your implementation of the entire <code>CiphertextMessage</code> class in the box below.",
			"points":"20"
		}
	]
},
{
	"title":"Solve the following problem Decrypt a story",
	"activityType":"assignment",
	"questions":
	[
		{
			"questionType":"filesubmission",
			"questionText":"For this problem, the graders will use our implementation of the <code>Message</code>, <code>PlaintextMessage</code>, and <code>CiphertextMessage</code> classes, so don't worry if you did not get the previous parts correct. <br><br> Now that you have all the pieces to the puzzle, please use them to decode the file story.txt. The file ps6.py contains a helper function <code>get_story_string()</code> that returns the encrypted version of the story as a string. Create a <code>CiphertextMessage </code>object using the story string and use <code>decrypt_message</code> to return the appropriate shift value and unencrypted story string. <br><br> Paste your function <code>decrypt_story()</code> in the box below.",
			"points":"20"			
		}
	]
}
]
