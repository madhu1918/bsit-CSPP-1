[
	{
		"activityType":"quiz",
		"title":"Last activity we leared about Operators and Branching in python. Let's answer few questions in this activity",
		"quizDescription":"For each of the following expressions, indicate the value returned, or if the evaluation would lead to an error, write the word 'error' (note this is a word, not a string, no quotes). While you could simply type these expressions into your IDE, we encourage you to answer them directly since this will help reinforce your understanding of basic Python expressions.<br><br><b>Hint: Python boolean Types</b><br>Remember that in Python words are case-sensitive. The word True is a Python keyword (it is the value of the Boolean type) and is not the same as the word true. Refer to the <a href=\"https://docs.python.org/3/library/stdtypes.html#boolean-values\">Python documentation on Boolean values.</a><br><br><b>Hint: Priority order of Boolean Operations</b><br>For these problems, it's important to understand the priority of Boolean operations. The order of operations is as follows:<ol><li>Parentheses. Before operating on anything else, Python must evaluate all parentheticals starting at the innermost level.</li><li>not statements.</li><li>and statements.</li><li>or statements.</li></ol>What this means is that an expression like<br>not True and False<br><br>evaluates to False, because the not is evaluated first (not True is False), then the and is evaluated, yielding False and False which is False.<br><br>However the expression<br><br>not (True and False)<br><br>evaluates to True, because the expression inside the parentheses must be evaluated first - True and False is False. Next the not can be evaluated, yielding not False which is True.<br><br>Overall, you should always use parenthesis when writing expressions to make it clear what order you wish to have Python evaluate your expression. As we've seen here, not (True and False) is different from (not True) and False - but it's easy to see how Python will evaluate it when you use parentheses. A statement like not True and False can bring confusion!",
		"questions":[
			{
				"questionType":"fillintheblank",
				"questionText":"<code>3 > 4</code>",
				"points":"1",
				"answer":"False"
			},
			{
				"questionType":"fillintheblank",
				"questionText":"<code>4.0 > 3.999</code>",
				"points":"1",
				"answer":"True"
			},
			{
				"questionType":"fillintheblank",
				"questionText":"<code>4 > 4</code>",
				"points":"1",
				"answer":"False"
			},
			{
				"questionType":"fillintheblank",
				"questionText":"<code>4 > + 4</code>",
				"points":"1",
				"answer":"False"
			},
			{
				"questionType":"fillintheblank",
				"questionText":"<code>2 + 2 == 4</code>",
				"points":"1",
				"answer":"True"
			},
			{
				"questionType":"fillintheblank",
				"questionText":"<code>True or False</code>",
				"points":"1",
				"answer":"True"
			},
			{
				"questionType":"fillintheblank",
				"questionText":"<code>False or False</code>",
				"points":"1",
				"answer":"False"
			},
			{
				"questionType":"fillintheblank",
				"questionText":"<code>not False</code>",
				"points":"1",
				"answer":"True"
			},
			{
				"questionType":"fillintheblank",
				"questionText":"<code>3.0 - 1.0 != 5.0 - 3.0</code>",
				"points":"1",
				"answer":"False"
			},
			{
				"questionType":"fillintheblank",
				"questionText":"<code>3 > 4 or (2 < 3 and 9 > 10)</code>",
				"points":"1",
				"answer":"False"
			},
			{
				"questionType":"fillintheblank",
				"questionText":"<code>4 > 5 or 3 < 4 and 9 > 8</code>",
				"points":"1",
				"answer":"True"
			},
			{
				"questionType":"fillintheblank",
				"questionText":"<code>not(4 > 3 and 100 > 6)</code>",
				"points":"1",
				"answer":"False"
			}
		]
	}
]